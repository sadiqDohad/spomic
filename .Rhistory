if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
object <- new("Spomic",
sample = as.character(unique_samples),
df = df,
pp = spomic_to_pp(df),
# null_envelope = data.frame(),
hyperparameters = list(),
results = list()
)
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
View(spomic)
spomic@results$dummy <- "dummy"
spomic@results$dummy2 <- data.frame(x = "dummy")
#' #' @export
#' setClass(
#'   "Spomic",
#'   slots = c(
#'     sample = "character",
#'     df = "data.frame",
#'     pp = "ANY",  # Allow any object, including ppp
#'     # null_envelope = "data.frame",
#'     hyperparameters = "list",
#'     results = "list"
#'   ),
#'   prototype = list(
#'     pp = NULL  # Initialize as NULL to avoid undefined slot
#'   )
#' )
#'
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
pp <- spatstat.geom::ppp(df$x,
df$y,
window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
# object <- new("Spomic",
#               sample = as.character(unique_samples),
#               df = df,
#               pp = spomic_to_pp(df),
#               # null_envelope = data.frame(),
#               hyperparameters = list(),
#               results = list()
# )
object <- new("Spomic",
details = list(),
df = df,
pp = spomic_to_pp,
results = list()
)
object@details$sample <- unique(object@df$sample)
object@details$hyperparameters <- list()
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
View(spomic)
plotCellPair(spomic, cellA = "Epithelial", cellB = "Fibroblast")
plotKDE(spomic, cell = "Epithelial")
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
reorder_counterclockwise <- function(coords) {
# Calculate centroid
centroid_x <- mean(coords[, 1])
centroid_y <- mean(coords[, 2])
# Calculate angle from centroid
angles <- pracma::atan2(coords[, 2] - centroid_y, coords[, 1] - centroid_x)
# Reorder points by angle (counterclockwise)
ordered_coords <- coords[order(angles), ]
return(ordered_coords)
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
concave_hull <- concaveman::concaveman(c(df$x, df$y), concavity = 50)
concave_hull_ccw <- reorder_counterclockwise(concave_hull)
tight_window <- spatstat.geom::owin(poly = list(x = concave_hull_ccw[, 1],
y = concave_hull_ccw[, 2]))
pp <- spatstat.geom::ppp(df$x,
df$y,
window = tight_window
# window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
reorder_counterclockwise <- function(coords) {
# Calculate centroid
centroid_x <- mean(coords[, 1])
centroid_y <- mean(coords[, 2])
# Calculate angle from centroid
angles <- pracma::atan2(coords[, 2] - centroid_y, coords[, 1] - centroid_x)
# Reorder points by angle (counterclockwise)
ordered_coords <- coords[order(angles), ]
return(ordered_coords)
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
concave_hull <- concaveman::concaveman(c(df$x, df$y), concavity = 50)
concave_hull_ccw <- reorder_counterclockwise(concave_hull)
tight_window <- spatstat.geom::owin(poly = list(x = concave_hull_ccw[, 1],
y = concave_hull_ccw[, 2]))
pp <- spatstat.geom::ppp(df$x,
df$y,
window = tight_window,
# window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
# object <- new("Spomic",
#               sample = as.character(unique_samples),
#               df = df,
#               pp = spomic_to_pp(df),
#               # null_envelope = data.frame(),
#               hyperparameters = list(),
#               results = list()
# )
object <- new("Spomic",
details = list(),
df = df,
pp = spomic_to_pp(df),
results = list()
)
object@details$sample <- unique(object@df$sample)
object@details$hyperparameters <- list()
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
df$y
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
reorder_counterclockwise <- function(coords) {
# Calculate centroid
centroid_x <- mean(coords[, 1])
centroid_y <- mean(coords[, 2])
# Calculate angle from centroid
angles <- pracma::atan2(coords[, 2] - centroid_y, coords[, 1] - centroid_x)
# Reorder points by angle (counterclockwise)
ordered_coords <- coords[order(angles), ]
return(ordered_coords)
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
concave_hull <- concaveman::concaveman(cbind(df$x, df$y), concavity = 50)
concave_hull_ccw <- reorder_counterclockwise(concave_hull)
tight_window <- spatstat.geom::owin(poly = list(x = concave_hull_ccw[, 1],
y = concave_hull_ccw[, 2]))
pp <- spatstat.geom::ppp(df$x,
df$y,
window = tight_window,
# window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
# object <- new("Spomic",
#               sample = as.character(unique_samples),
#               df = df,
#               pp = spomic_to_pp(df),
#               # null_envelope = data.frame(),
#               hyperparameters = list(),
#               results = list()
# )
object <- new("Spomic",
details = list(),
df = df,
pp = spomic_to_pp(df),
results = list()
)
object@details$sample <- unique(object@df$sample)
object@details$hyperparameters <- list()
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
reorder_counterclockwise <- function(coords) {
# Calculate centroid
centroid_x <- mean(coords[, 1])
centroid_y <- mean(coords[, 2])
# Calculate angle from centroid
angles <- atan2(coords[, 2] - centroid_y, coords[, 1] - centroid_x)
# Reorder points by angle (counterclockwise)
ordered_coords <- coords[order(angles), ]
return(ordered_coords)
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
concave_hull <- concaveman::concaveman(cbind(df$x, df$y), concavity = 50)
concave_hull_ccw <- reorder_counterclockwise(concave_hull)
tight_window <- spatstat.geom::owin(poly = list(x = concave_hull_ccw[, 1],
y = concave_hull_ccw[, 2]))
pp <- spatstat.geom::ppp(df$x,
df$y,
window = tight_window,
# window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
# object <- new("Spomic",
#               sample = as.character(unique_samples),
#               df = df,
#               pp = spomic_to_pp(df),
#               # null_envelope = data.frame(),
#               hyperparameters = list(),
#               results = list()
# )
object <- new("Spomic",
details = list(),
df = df,
pp = spomic_to_pp(df),
results = list()
)
object@details$sample <- unique(object@df$sample)
object@details$hyperparameters <- list()
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
plot(spomic@pp)
plot(density(spomic@pp))
density(spomic@pp)
plot.pp(density(spomic@pp))
spatstat.geom::marks()
?spatstat.geom::marks()
?capture.output
devtools::document()
?create_spomic
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
get_silverman()
?coords
?envelope
simulate_expr <- expression(superimpose(
i = rpoispp(lambdaFrom),
j = rpoispp(lambdaTo)
))
simulate_expr
#   # Y = spatstat.geom::rescale(spomic@pp),
#   fun = spatstat.explore::Kcross.inhom,
#   i = i,
#   j = j,
#   fix.marks = TRUE,
#   correction = "Ripley",
#   nsim = spomic@details$hyperparameters$csr_nsim,
#   global = FALSE,
#   verbose = verbose
# )
envelope_result <- spatstat.explore::envelope(
Y = spatstat.geom::rescale(ij_subset),
fun = spatstat.explore::Kcross.inhom,
i = i,
j = j,
lambdaFrom = density(i_subset, sigma = silverman_i),
lambdaTo = density(j_subset, sigma = silverman_j),
fix.marks = TRUE,
correction = "Ripley",
nsim = spomic@details$hyperparameters$csr_nsim,
global = FALSE,
# update = TRUE,
verbose = verbose
)
ij_subset <- spatstat.geom::subset.ppp(spomic@pp, marks %in% c(i, j))
i_subset <- spatstat.geom::subset.ppp(spomic@pp, marks == i)
devtools::document()
devtools::document()
sprintf("Set a valid spatial statistic hyperparameter!")
sprintf("Set a valid spatial statistic hyperparameter!: c('Kcross', 'Kcross.inhom', 'CLQ')")
?spatstat.explore::Kcross
pi
?pbapply::pblapply
?tidyplots::add_mean_bar
135/10
/4
13.5/4
40*3
R.version
?install.packages
1:25
26:50
R.version
